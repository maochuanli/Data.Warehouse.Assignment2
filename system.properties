# This is the system settings for the application.
# For database connection, Both Oracle and Derby databases are supported.
# in.db.* properties are for connection to the operational database
# out.db.* are for data warehouse database. 
# For the same properties, the latter lin will overwrite the previous one,
# For example:
#            a = 3
#            a = 5
#            System will take the latter value 5 for execution.

## Oracle database for Operational Database
in.db.driverClassName=oracle.jdbc.driver.OracleDriver
in.db.url=jdbc:oracle:thin:@oracle2.aut.ac.nz:1521:msdbs
in.db.username=kqc3001
in.db.password=warehouse

## Oracle database for Data Warehouse
out.db.driverClassName=oracle.jdbc.driver.OracleDriver
out.db.url=jdbc:oracle:thin:@oracle2.aut.ac.nz:1521:msdbs
out.db.username=kqc3001
out.db.password=warehouse

## Derby Database
# The operationl database connection;
in.db.driverClassName=org.apache.derby.jdbc.ClientDriver
in.db.url=jdbc:derby://localhost:1527/countdownDB
in.db.username=kqc3001
in.db.password=password

# The data warehouse database connection;
out.db.driverClassName=org.apache.derby.jdbc.ClientDriver
out.db.url=jdbc:derby://localhost:1527/countdownDW
out.db.username=kqc3001
out.db.password=password

# The meshjoin algorithm partition size
meshjoin.partitions=10
# The number of records within one partition in the stream queue, 
# Once one partition of realtime records reach to this number, it will be pushed
# into the stream queue for mesh-join
stream.partition.size=1000
######################## STREAM QUEUE, ONE PART HAS 1000 RECORDS ##############
#            #  P  |  P   |  P   |  P  |  P  |   P   |  P   |  P  |  P   | Part  |
# max=1000 > #  1> |  2>  |  3>  |  4> |  5> |   6>  |  7>  |  8> |  9>  |  10>  | >> Queue.POP()
################################################################################
# For the master data partition size, it is dynamically calculated in system based on above parition.size

######## MASTER DATA BUFFER ##############
# BUFFER SIZE == COUNT(*)/PARTITION.SIZE #
##########################################

# for better performance, when inserting sales data into warehouse, a batch insersion mechanisum is used
# The following number of records are inserted into sales table all together
# for(int i=0;i<500;i++){
#   preparedStmt.setXXX(1,x)        
#   preparedStmt.setXXX(2,x)
#   preparedStmt.addBatch()
# }
# preparedStmt.executeUpdate()
sql.insert.batch.size=500
